#
# Copyright (C) 2015 Canonical Ltd
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

project: network-manager

environment:
  PROJECT_PATH: /home/network-manager
  SNAP_NAME: network-manager
  # Allow the host to pass the channel to use for the test run
  SNAP_CHANNEL: '$(HOST: echo "${SNAP_CHANNEL:-}")'
  LOCAL_BIN: /usr/local/bin
  TESTSLIB: $PROJECT_PATH/cicd/snapd-lib
  SYSTEMSNAPSTESTLIB: $PROJECT_PATH/tests/lib
  TESTSTOOLS: $PROJECT_PATH/cicd/snapd-lib/tools
  PATH: /snap/bin:$PATH:/var/lib/snapd/snap/bin:$PROJECT_PATH/cicd/snapd-lib/tools
  TESTSTMP: /var/tmp/snapd-tools
  REUSE_SNAPD: 0
  SRU_VALIDATION: 0
  # List the snaps which are cached
  PRE_CACHE_SNAPS: jq
  CORE_CHANNEL: '$(HOST: echo "${SPREAD_CORE_CHANNEL:-edge}")'
  BASE_CHANNEL: '$(HOST: echo "${SPREAD_BASE_CHANNEL:-edge}")'
  KERNEL_CHANNEL: '$(HOST: echo "${SPREAD_KERNEL_CHANNEL:-edge}")'
  GADGET_CHANNEL: '$(HOST: echo "${SPREAD_GADGET_CHANNEL:-edge}")'
  SNAPD_CHANNEL: '$(HOST: echo "${SPREAD_SNAPD_CHANNEL:-edge}")'
  DEFAULT_NETPLAN_FILE: 50-cloud-init.yaml

backends:
  google:
    key: '$(HOST: echo "$SPREAD_GOOGLE_KEY")'
    location: snapd-spread/us-east1-b
    plan: n2-standard-2
    halt-timeout: 2h
    systems:
      - ubuntu-core-22-64:
          image: ubuntu-22.04-64
          workers: 8
          storage: 20G
    prepare: |
      # Builds UC image on top of classic 22.04
      "$TESTSLIB"/prepare-restore.sh --prepare-suite
  qemu:
    memory: 4G
    systems:
      - ubuntu-core-22:
          # TODO how is this done in snapd spread?
          #bios: /usr/share/OVMF/OVMF_CODE.fd
          username: test
          password: test

# Put this somewhere where we have read-write access
path: /home/network-manager

exclude:
  - .git

prepare: |
  # Fix some connectivity isues:
  # apt update is hanging on security.ubuntu.com with IPv6, prefer IPv4 over IPv6
  cat <<EOF > gai.conf
  precedence  ::1/128       50
  precedence  ::/0          40
  precedence  2002::/16     30
  precedence ::/96          20
  precedence ::ffff:0:0/96 100
  EOF
  if ! mv gai.conf /etc/gai.conf; then
      echo "/etc/gai.conf is not writable, ubuntu-core system? apt update won't be affected in that case"
      rm -f gai.conf
  fi

  # Take the MATCH and REBOOT functions from spread and allow our shell
  # scripts to use them as shell commands. The replacements are real
  # executables in cicd/snapd-lib/bin (which is on PATH) but they source
  # spread-funcs.sh written here, base on the definitions provided by SPREAD.
  # This ensures that 1) spread functions define the code 2) both MATCH and
  # REBOOT are executables and not functions, and can be called from any
  # context.
  type MATCH | tail -n +2 > "$TESTSLIB"/spread-funcs.sh
  unset MATCH
  type NOMATCH | tail -n +2 >> "$TESTSLIB"/spread-funcs.sh
  unset NOMATCH
  type REBOOT | tail -n +2 >> "$TESTSLIB"/spread-funcs.sh
  unset REBOOT

  # Copy external tools from the subtree to the "$TESTSLIB"/tools directory
  # The idea is to have a single directory with all the testing tools
  cp -f "$TESTSLIB"/external/snapd-testing-tools/tools/* "$TESTSTOOLS"
  cp -f "$TESTSLIB"/external/snapd-testing-tools/remote/* "$TESTSTOOLS"

prepare-each: |
  . "$SYSTEMSNAPSTESTLIB"/prepare-each.sh

restore-each: |
  . "$SYSTEMSNAPSTESTLIB"/restore-each.sh

debug-each: |
  journalctl
  dmesg | grep DENIED || true

# (default is 15 min)
kill-timeout: 30m

suites:
  tests/core/:
    summary: Tests for NetworkManager snap running on UC
    systems: [ubuntu-core-*]
    prepare: |
      # We need simulated wifi interfaces for some tests
      . "$SYSTEMSNAPSTESTLIB"/enable-wifi-sim.sh
  tests/vpn/:
    summary: Tests for NetworkManager VPN client plugins
    systems: [ubuntu-core-*]
